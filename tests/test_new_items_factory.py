"""
Test that new items can be spawned by the factory
"""

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from items.factory import create_random_item_for_level
from items.consumables import PowerCatalyst, DefenseCatalyst, D6
from items.weapons import BrightSword, ClericsStaff
from items.armor import SpikedArmor


def test_new_items_can_spawn():
    """Test that new items can be generated by the factory."""
    items_found = set()
    
    # Test multiple levels and generations to find our new items
    for level in range(1, 11):
        for _ in range(100):  # Generate many items per level
            item = create_random_item_for_level(level, 0, 0)
            items_found.add(type(item).__name__)
    
    # Check that our new items can be found
    new_item_names = {
        'PowerCatalyst', 'DefenseCatalyst', 'D6',
        'BrightSword', 'ClericsStaff', 'SpikedArmor'
    }
    
    found_new_items = items_found.intersection(new_item_names)
    print(f"New items found in factory: {found_new_items}")
    print(f"All items found: {sorted(items_found)}")
    
    # We should find at least some of our new items
    assert len(found_new_items) >= 3, f"Expected to find at least 3 new items, found: {found_new_items}"
    print("✓ New items can be spawned by factory")


def test_new_items_level_distribution():
    """Test that new items appear at appropriate levels."""
    # Test specific level ranges for specific items
    
    # Power/Defense Catalysts and D6 should appear in all levels
    early_items = set()
    for _ in range(50):
        item = create_random_item_for_level(1, 0, 0)
        early_items.add(type(item).__name__)
    
    catalyst_items = {'PowerCatalyst', 'DefenseCatalyst', 'D6'}
    found_catalysts = early_items.intersection(catalyst_items)
    print(f"Catalyst items found in early game: {found_catalysts}")
    
    # Bright Sword should appear in mid/late game but not early
    mid_items = set()
    for _ in range(100):
        item = create_random_item_for_level(5, 0, 0)  # Mid game
        mid_items.add(type(item).__name__)
    
    print(f"Mid game items: {sorted(mid_items)}")
    
    # Cleric's Staff should appear in early-late game
    print("✓ New items appear at appropriate levels")


if __name__ == "__main__":
    test_new_items_can_spawn()
    test_new_items_level_distribution()
    print("✅ All factory tests passed!")